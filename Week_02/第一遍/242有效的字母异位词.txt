// 比较挫的方法 但很好理解
// 执行用时：16 ms, 在所有 Java 提交中击败了20.49%的用户
// 内存消耗：39.6 MB, 在所有 Java 提交中击败了15.33%的用户
class Solution {
    public boolean isAnagram(String s, String t) {
	if (s.length() != t.length()) return false;
        Map<Character,Integer> map = new HashMap<>();
        for (char c : s.toCharArray()) {
            int count = map.getOrDefault(c,0) + 1;
            map.put(c,count);
        }
        for (char c : t.toCharArray()) {
            int count = map.getOrDefault(c,0) - 1;
            if (count < 0) {
                return false;
            }
            map.put(c,count);
        }
        for (Character i : map.keySet()) {
            if (map.get(i) != 0) {
                return false;
            }
        }
        return true;
    }
}

// 好的方法
// 解题思路
// 标签：哈希映射
// 首先判断两个字符串长度是否相等，不相等则直接返回 false
// 若相等，则初始化 26 个字母哈希表，遍历字符串 s 和 t
// s 负责在对应位置增加，t 负责在对应位置减少
// 如果哈希表的值都为 0，则二者是字母异位词

class Solution {
    public boolean isAnagram(String s, String t) {
        if (s.length() != t.length()) return false;
        int[] arr = new int[26];
        int len = s.length();
        for (int i = 0; i < len; i++) {
            arr[s.charAt(i) - 97]++;
            arr[t.charAt(i) - 97]--;
        }
        for (int i:arr
             ) {
            if (i != 0) {
                return false;
            }
        }
        return true;
    }
}